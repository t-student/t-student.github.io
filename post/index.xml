<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on t-student</title>
    <link>https://t-student.github.io/post/</link>
    <description>Recent content in Posts on t-student</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +1100</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Logistic Regression - Power Analysis</title>
      <link>https://t-student.github.io/post/logistic01-powersim/</link>
      <pubDate>Fri, 16 Feb 2018 00:00:00 +1100</pubDate>
      
      <guid>https://t-student.github.io/post/logistic01-powersim/</guid>
      <description>

&lt;p&gt;If you have multiple treatment options that lead to different outcomes, you will only be able to detect a difference in the average outcome under conditions where there is sufficient &lt;em&gt;statistical power&lt;/em&gt; to do so. &lt;em&gt;Statistical power&lt;/em&gt; is the probability that we detect an effect when there really is an effect to be detected. As statistical power increases the probability of making a Type II error (concluding there is no effect when, in fact, there is one) decreases.&lt;/p&gt;

&lt;p&gt;Statistical power is affected by the size of the effect, the statistical significance criteria (typically 0.05) and the size of the sample. It is possible to miss a real effect simply by not taking a large enough sample. Power analyses help us by allowing us to explore the experimental conditions for a range of sample sizes.&lt;/p&gt;

&lt;p&gt;In this post we look at how power varies in a logistic regression setting. First we compare treatment groups directly and then we compare treatment groups stratified by a characteristic of the mother that is also associated with the response of interest - e.g. a genetic disposition for a disease.&lt;/p&gt;

&lt;h2 id=&#34;rct-steroidal-treatments-for-reducing-the-risk-of-having-an-ashthmatic-child&#34;&gt;RCT Steroidal Treatments for Reducing the Risk of having an Ashthmatic Child.&lt;/h2&gt;

&lt;p&gt;Consider a steroidal intervention that influences the likelihood of having an ashmatic child. Assume a pilot study suggests the observed proportion of asthmatic kids in the control arm is 17.4% and in the treatment arm is 10%. This implies a relative risk (RR) of 0.575 - the probability of a kid having ashmatic in the treatment arm is 0.58 times that in the control arm.&lt;/p&gt;

&lt;p&gt;Robert Grant gives us a way to convert odds-ratios (OR) to RR &lt;a href=&#34;https://robertgrantstats.wordpress.com/2014/01/27/how-to-convert-odds-ratios-to-relative-risks/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, specifically $RR = \frac{OR}{1 â€“ p + (p \times OR)}$. Turning this formula around we find the unadjusted odds-ratio is about 0.5329 - the odds of an &amp;ldquo;average&amp;rdquo; parent having an asthmatic kid in the treatment arm are around 0.53 times the odds of an equivalent parent having an asthmatic kid in the control arm.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we want to work out a sample size for a formal parallel arm RCT. We suspect that we will only be able to get 650 people and the odds of an event in the intervention group are about half the odds of an event in the control group. What sort of power do we expect to obtain with this sample?&lt;/p&gt;

&lt;h3 id=&#34;method&#34;&gt;Method&lt;/h3&gt;

&lt;p&gt;Assume:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Balanced groups (randomly selected) of 325 mothers per arm&lt;/li&gt;
&lt;li&gt;Proportion having asthmatic kid in control is 0.174&lt;/li&gt;
&lt;li&gt;The odds ratio associated with the steroidal treatment is 0.5329&lt;/li&gt;
&lt;li&gt;Adopt a linear predictor solely based on group membership&lt;/li&gt;
&lt;li&gt;Simulate a sample of kids by:

&lt;ol&gt;
&lt;li&gt;Computing probability of asthma based on the exponentiated logits.&lt;/li&gt;
&lt;li&gt;Draw from binomial distribution parameterised as $Bin(n, p)$ where n is the (total) sample size and p the probability of ashmatic child.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Fit a GLM with specification y ~ grp using the sample data and from this predict the probability for the control and treatment groups along with the difference in probability and estimated OR&lt;/li&gt;
&lt;li&gt;Bootstrap (299 replicates) to get the 0.025 and 0.975 quantiles of the difference&lt;/li&gt;
&lt;li&gt;Repeat the above 999 times&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above can be decomposed into separate functions - one to generate a simulated dataset, one to retrieve the bootstrap statistics of interest and one to contain these two, which we will call from a loop with 999 iterations.&lt;/p&gt;

&lt;h3 id=&#34;data-generation&#34;&gt;Data Generation&lt;/h3&gt;

&lt;p&gt;This first function creates a dataset representative of the data we might observe in our real experiment. Each time the method is called a new data set will be created. Ignore the single nucleotide polymorphisms (&lt;a href=&#34;https://en.wikipedia.org/wiki/Single-nucleotide_polymorphism&#34; target=&#34;_blank&#34;&gt;SNP&lt;/a&gt;) variables for now.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;get.data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(n.arm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;325&lt;/span&gt;, 
                     p.ctl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.174&lt;/span&gt;,
                     or.trt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5329&lt;/span&gt;,
                     or.snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;, 
                     include.snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F){

  &lt;span style=&#34;color:#75715e&#34;&gt;# We create a linear predictor from which we generate data.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# y ~ b0 + b1 * grp&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# or &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# y ~ b0 + b1 * grp + b2 * snp&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# The response of interest is asthma, denoted as 1/0 (yes/no).&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Assume proportion in the ctl group with asthma is 0.174.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# So, assuming the control group is the referant, &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# the baseline odds are:&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# p / (1-p) = 0.210653753&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Taking the log of this gives us the intercept term&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# log(0.21) = -1.55754&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# The OR for intervention is 0.5329:&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# log(0.5329) = -0.6294215&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# Baseline odds:&lt;/span&gt;
  b0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;log&lt;/span&gt;(p.ctl &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; p.ctl))
  &lt;span style=&#34;color:#75715e&#34;&gt;# b1 is the coef for trt effect&lt;/span&gt;
  b1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;log&lt;/span&gt;(or.trt)
   
  &lt;span style=&#34;color:#75715e&#34;&gt;# Group membership (0 = ctl, 1 = trt arm)&lt;/span&gt;
  grp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n.arm), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n.arm))
  
  snp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (include.snp){
    b2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;log&lt;/span&gt;(or.snp)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Genetic disposition to asthmatic kids in 86% of the population.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# The 86% is arbitrary and made up just for the example.&lt;/span&gt;
    snp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; rbinom(n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n.arm, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, prob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.86&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Linear predictor a combination of group and genetic disposition&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# for having an asthmatic kid&lt;/span&gt;
    logit.y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; b0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b1 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; grp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; snp
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Linear predictor for the simple group comparison&lt;/span&gt;
    logit.y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; b0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b1 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; grp 
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;# Gives us a randomly generated sequence of asthmatic kids&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# based on individual probability of event.&lt;/span&gt;
  p.y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exp&lt;/span&gt;(logit.y)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exp&lt;/span&gt;(logit.y))
  y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; rbinom(n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n.arm, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, prob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.y)
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Our pseudo sample.&lt;/span&gt;
  df.dat &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data.frame&lt;/span&gt;(id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;length&lt;/span&gt;(grp), 
                       grp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grp, 
                       snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; snp,
                       p.y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.y,
                       y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y)
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(df.dat)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;bootstrap-function&#34;&gt;Bootstrap Function&lt;/h3&gt;

&lt;p&gt;This function is used by the call to the &lt;code&gt;boot&lt;/code&gt; function - more context can be found in the R help section for &lt;code&gt;boot&lt;/code&gt;. Given a dataset and indices the function fits a GLM using a supplied formula/specification and returns estimates and predictions from the fitted model.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Boot strapped logistic giving diff between proportions&lt;/span&gt;
boot.glm &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(df.b, 
                     indices, 
                     myformula &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; myformula,
                     df.new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.new) {
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# GLM Logistic&lt;/span&gt;
  d &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df.b[indices, ]
  m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; glm(myformula, family&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;binomial, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d)
  
  prop &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; predict(m, newdata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.new, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;response&amp;#34;&lt;/span&gt;)
  p.ctl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; prop[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
  p.trt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; prop[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
  p.diff &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p.ctl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; p.trt
  est.or &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exp&lt;/span&gt;(coef(m))[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]

  &lt;span style=&#34;color:#75715e&#34;&gt;# s &amp;lt;- summary(m)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# est.or.pval &amp;lt;- s$coefficients[&amp;#34;stageint.2&amp;#34;, &amp;#34;Pr(&amp;gt;|z|)&amp;#34;]&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;as.numeric&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(p.ctl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.ctl,
               p.trt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.trt,
               p.diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.diff,
               est.or &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; est.or))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;simulation-function&#34;&gt;Simulation Function&lt;/h3&gt;

&lt;p&gt;This function encapsulates the code required to perform a single iteration of the simulation. It calls on the &lt;code&gt;get.data&lt;/code&gt; described earlier then bootstraps a GLM model (with a pre-specified formula) to obtain parameter estimates and confidence intervals and dumps them into a data.frame that is returned to the calling function.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;sim.glm &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(x,
                    n.arm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;325&lt;/span&gt;, 
                    p.ctl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.174&lt;/span&gt;,
                    or.trt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5329&lt;/span&gt;,
                    or.snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;, 
                    boot.reps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;299&lt;/span&gt;,
                    include.snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F){
  
  
  df.dat &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get.data(n.arm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n.arm, 
                     p.ctl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.ctl,
                     or.trt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; or.trt,
                     or.snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; or.snp, 
                     include.snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; include.snp)


  &lt;span style=&#34;color:#75715e&#34;&gt;# Specify the required formula to fit&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(include.snp){
    myformula &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; grp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; snp
    df.new &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data.frame&lt;/span&gt;(grp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
    myformula &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; grp
    df.new &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data.frame&lt;/span&gt;(grp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;# Bootstrap&lt;/span&gt;
  bb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; boot&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;boot(df.dat, 
                   statistic&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;boot.glm, 
                   R&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;boot.reps, 
                   myformula &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; myformula, 
                   df.new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.new)
  

  &lt;span style=&#34;color:#75715e&#34;&gt;# First look at differences&lt;/span&gt;
  glm.prob.diff.est &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mean&lt;/span&gt;(bb&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;[,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
  glm.prob.diff.lwr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as.numeric&lt;/span&gt;(quantile(bb&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;[,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], probs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.025&lt;/span&gt;))
  glm.prob.diff.upr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as.numeric&lt;/span&gt;(quantile(bb&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;[,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], probs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.975&lt;/span&gt;))
  glm.prob.sig.diff &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ifelse&lt;/span&gt;(glm.prob.diff.est &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; glm.prob.diff.lwr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Now look at OR&lt;/span&gt;
  glm.or.est &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mean&lt;/span&gt;(bb&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;[,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])

  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Note that for the snp tests, the probability of having an asthmatic kid&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# is conditional on presence of snp.&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(include.snp){
    &lt;span style=&#34;color:#75715e&#34;&gt;# names(df.dat)&lt;/span&gt;
    df.tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df.dat[df.dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;grp&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; df.dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;snp&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, ] 
    n.pre &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(df.tmp)
    p.pre &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(df.tmp&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;y)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(df.tmp)
    
    df.tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df.dat[df.dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;grp&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; df.dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;snp&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, ] 
    n.post &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(df.tmp)
    p.post &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(df.tmp&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;y)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(df.tmp)
  }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
    n.pre &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(df.dat)
    p.pre &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(df.dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;y)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(df.dat)
    
    n.post &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(df.dat)
    p.post &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(df.dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;y)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(df.dat)
  }

  
  df.simres &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data.frame&lt;/span&gt;(n.pre &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n.pre,
                          n.post &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n.post,
                          p.pre &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.pre,
                          p.post &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.post,
                          glm.prob.diff.est &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; glm.prob.diff.est,
                          glm.prob.diff.lwr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; glm.prob.diff.lwr,
                          glm.prob.diff.upr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; glm.prob.diff.upr,
                          glm.prob.sig.diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; glm.prob.sig.diff, 
                          glm.or.est &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; glm.or.est,
                          simid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x)

  df.simres
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;bringing-it-together&#34;&gt;Bringing it together&lt;/h3&gt;

&lt;p&gt;Here we incorporate the functions into a &lt;a href=&#34;https://en.wikipedia.org/wiki/Monte_Carlo_method&#34; target=&#34;_blank&#34;&gt;monte carlo simulation&lt;/a&gt;. We initialise variables and then start a loop using parallel processing (to reduce run time if multiple cores are available). The results from each simulation is stored in the &lt;code&gt;df.out2&lt;/code&gt; &lt;code&gt;data.frame&lt;/code&gt;. We can interogate &lt;code&gt;df.out2&lt;/code&gt; to get insight into the distribution of various estimates of interest.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initialise variables&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;354&lt;/span&gt;)
nsim &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;
n.arm &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;650&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# c(500, 550, 600, 650, 700)&lt;/span&gt;
p.ctl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.174&lt;/span&gt;
or.trt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5329&lt;/span&gt;
or.snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;
boot.reps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;299&lt;/span&gt;
include.snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F

&lt;span style=&#34;color:#75715e&#34;&gt;# Run the analysis in parallel across multiple CPU cores&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Initiate cluster&lt;/span&gt;
no_cores &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; detectCores() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
cl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; makeCluster(no_cores)

&lt;span style=&#34;color:#75715e&#34;&gt;# Specify all the functions that are required by the sim.&lt;/span&gt;
clusterExport(cl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cl, &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get.data&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boot.glm&amp;#34;&lt;/span&gt;))

l.res2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; parLapply(cl, 
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;seq&lt;/span&gt;(nsim), 
                    fun &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sim.glm, 
                    n.arm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n.arm, 
                    p.ctl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.ctl,
                    or.trt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; or.trt,
                    or.snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; or.snp,
                    boot.reps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boot.reps,
                    include.snp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; include.snp)

stopCluster(cl)


df.out2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as.data.frame&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;do.call&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rbind&lt;/span&gt;, l.res2))
&lt;span style=&#34;color:#66d9ef&#34;&gt;mean&lt;/span&gt;(df.out2&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;glm.prob.sig.diff)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;By setting the &lt;code&gt;include.snp&lt;/code&gt; variable to &lt;code&gt;TRUE&lt;/code&gt; we can run a second analysis using the same code that introduces a SNP covariate into the data generation process and the GLM specification to see what effect it has on power.&lt;/p&gt;

&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;

&lt;p&gt;The figure below shows the probability density for the lower bound of the difference in proportions of children born with asthma in each group. The central values for each group were 0.1 and 0.174 for the treatment and control groups respectively, aligning with the prespecified values. The proportion of the simulations where the &lt;strong&gt;lower bound&lt;/strong&gt; of a 95% confidence interval for each of the estimated differences is greater than zero is 0.76, i.e. a little under 80%.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t-student.github.io/media/power01-diff01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Important Note: We are looking at the difference in predicted proportions with asthma. We would get a different result if we were just looking at the significance of the odds ratio estimated from the GLM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next figure shows the same plot obtained from the analysis stratified by the SNP status. In this case the proportion of the simulations where the &lt;strong&gt;lower bound&lt;/strong&gt; of a 95% confidence interval for each of the estimated differences is greater than zero is 0.87 giving 87% power.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t-student.github.io/media/power01-diff02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;By introducing a patient characteristic that was related to the response we were able to increase power without adjusting the sample size assumptions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interpreting Interaction Terms in a GLM (Binomial family, log link) - Logistic Regression</title>
      <link>https://t-student.github.io/post/logistic01-interaction/</link>
      <pubDate>Wed, 14 Feb 2018 00:00:00 +1100</pubDate>
      
      <guid>https://t-student.github.io/post/logistic01-interaction/</guid>
      <description>&lt;p&gt;The following code simulates events (deaths) from a known model for two groups over three time points. We adopt the view that the effects of time are linear. So, we have deaths acorss two groups (0 = control, 1 = treatment) at three time points (0 = baseline, 1 = 1 year in, 2 = 2 years in). We pre-specify a linear predictor relating group membership and timepoint to the probability of death and then generate bernouli trials based on these probabilities.&lt;/p&gt;

&lt;p&gt;The logistic regression model that we consider is:&lt;/p&gt;

&lt;p&gt;$$
log Pr(Y = 1) = \beta_0 + \beta_1 grp + \beta_2 time + \beta_3 grp \times time
$$&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Define the parameters&lt;/span&gt;
b0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt;
b1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-0.1&lt;/span&gt;
b2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;
b3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-0.3&lt;/span&gt;

n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1200&lt;/span&gt;
grp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# Model for the means&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; b0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b1 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; grp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b3 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; grp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; time

df.fig &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data.frame&lt;/span&gt;(grp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grp, time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time, p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p)
df.fig&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; rbinom(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, p)

&lt;span style=&#34;color:#75715e&#34;&gt;# The probability of death&lt;/span&gt;
ggplot(df.fig, aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;factor&lt;/span&gt;(grp))) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_point()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_line()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  scale_x_continuous(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Timepoint&amp;#34;&lt;/span&gt;, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  scale_y_continuous(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Proportion Death&amp;#34;&lt;/span&gt;, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;seq&lt;/span&gt;(from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# Proportion of deaths observed in the simulated data&lt;/span&gt;
df.tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df.fig &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;group_by(grp, time) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;summarise(p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(y)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;n())

&lt;span style=&#34;color:#75715e&#34;&gt;# The Simulated data&lt;/span&gt;
ggplot(df.fig, aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;factor&lt;/span&gt;(grp))) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_jitter(height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_point(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.tmp, aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;factor&lt;/span&gt;(grp)))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_line(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.tmp, aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;factor&lt;/span&gt;(grp)))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  scale_x_continuous(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Timepoint&amp;#34;&lt;/span&gt;, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  scale_y_continuous(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Died&amp;#34;&lt;/span&gt;, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, 
                     sec.axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sec_axis(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.&lt;/span&gt;, 
                                         name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Proportion Death&amp;#34;&lt;/span&gt;,
                                         breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;seq&lt;/span&gt;(from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The probabilities and simulated data are shown below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Means (p parameter)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Simulated data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://t-student.github.io/media/logit01-interactionfig1.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://t-student.github.io/media/logit01-interactionfig2.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now we fit a logistic regression model to the simulated data using the following commands:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;summary&lt;/span&gt;(lm1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; glm(y &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; grp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; time, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.fig, family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binomial()))
&lt;span style=&#34;color:#66d9ef&#34;&gt;exp&lt;/span&gt;(coef(lm1))

predict(lm1, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;response&amp;#34;&lt;/span&gt;, newdata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data.frame&lt;/span&gt;(grp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), 
                                                     time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;which gives us parameter estimates and predicted values as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Coefficients:
            Estimate Std. Error z value Pr(&amp;gt;|z|)    
(Intercept)  -0.4331     0.1333  -3.248  0.00116 ** 
grp          -0.2935     0.1949  -1.506  0.13210    
time          0.9363     0.1144   8.188 2.65e-16 ***
grp:time     -1.6395     0.1757  -9.333  &amp;lt; 2e-16 ***

exp(coef(lm1))
(Intercept)         grp        time    grp:time 
  0.6485035   0.7456175   2.5506104   0.1940778 

predict(lm1, type = &amp;quot;response&amp;quot;, newdata = data.frame(grp = c(0, 0, 0, 1, 1, 1), time = c(0, 1, 2, 0, 1, 2)))
        1         2         3         4         5         6 
0.3933892 0.6232216 0.8083892 0.3259346 0.1931308 0.1059346 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The exponentiated intercept term represents the baseline odds of death. Similarly, the exponentiated group and time main effects are odds-ratios. However, the exponentiated interaction term is a ratio of odds-ratios.&lt;/p&gt;

&lt;p&gt;The baseline odds are $exp(-0.4331) = 0.6485$. I have a terrible time thinking in odds (mainly because they are unbounded to the right) so I always convert to probabilities. The baseline odds of death equate to $odds/(1+odds) = 0.393$. This aligns with the &lt;code&gt;b0&lt;/code&gt; parameter in the linear predictor so things look good.&lt;/p&gt;

&lt;p&gt;While the main effect for suggests that the treatment group have lower odds of death at baseline, the effect is not significant at the 0.05 level. Nevertheless we know that the probability of death diverges over time and the interaction term is clearly significant so the main effect is usually retained in the model. The result suggests that the odds of death at baseline are a factor of $exp(-0.2935) = 0.746$ lower in the treatment group compared to the control group, i.e. 0.6485 \times 0.746 = 0.484$. In probabilities this implies that the probability of death at baseline in the treatment group is 0.326.&lt;/p&gt;

&lt;p&gt;In the control group we expect an increase in the odds of death by a factor of $exp(0.94) = 2.55$ for every unit increase in time. For example, at the first timepoint we expect the odds of death in the control group to be the baseline odds multiplied by 2.55, which is 1.654. This equates to a probability of death equal to 0.62, which aligns approximately with our pre-specified probability of 0.6 (and the predicted values from the code above). Similarly, at the second time point we expect that the odds of death in the control group is a whopping $exp(-0.43 + 2 \times 0.936) = 4.22, again correctly equating to the pre-specified probability of death of 0.808.&lt;/p&gt;

&lt;p&gt;The interpretation of the interaction term becomes clear when considering the expected probability of death over time. First we note that in the first timepoint, the odds of death in the treatment group are $exp(-0.43-0.29+0.94-1.64) = 0.24$ equating to a probability of 0.1931. As we saw before, the odds ratio for time in the control group is $exp(0.936) = 2.55$. Similarly the OR for time in the treatment group is $exp(0.9363 + -1.6395) = 0.495$. The ratio of these two values is $0.495 / 2.55 = 0.194$ which equates to the exponentiated interaction term.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interpreting Interaction Terms in a GLM (Poisson family, log link)</title>
      <link>https://t-student.github.io/post/poisson01-interaction/</link>
      <pubDate>Wed, 14 Feb 2018 00:00:00 +1100</pubDate>
      
      <guid>https://t-student.github.io/post/poisson01-interaction/</guid>
      <description>&lt;p&gt;The following code constructs a hypothetical dataset describing the count of events observed in two groups (0 = control, 1 = treatment) at two times (0 = baseline, 1 = follow up) with means defined through a pre-specified model.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define the parameters&lt;/span&gt;
b0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
b1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
b2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;
b3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;

n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;
grp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# Model for the means&lt;/span&gt;
lambda &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; b0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b1 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; grp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b3 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; grp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; time

df.fig &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data.frame&lt;/span&gt;(grp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grp, time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time, lambda &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lambda)
&lt;span style=&#34;color:#75715e&#34;&gt;# Generate poisson counts based on our means&lt;/span&gt;
df.fig&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; rpois(n, lambda)

&lt;span style=&#34;color:#75715e&#34;&gt;# The means&lt;/span&gt;
ggplot(df.fig, aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lambda, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;factor&lt;/span&gt;(grp))) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_jitter(height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# The observed data&lt;/span&gt;
ggplot(df.fig, aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;factor&lt;/span&gt;(grp))) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_jitter(height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The means and simulated data are below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Means (lambda parameter)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Simulated data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://t-student.github.io/media/poisson01-interactionfig1.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://t-student.github.io/media/poisson01-interactionfig2.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now we fit a poisson regression model to the simulated data using the following commands:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;summary&lt;/span&gt;(lm1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; glm(y &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; grp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; time, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.fig, family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; poisson()))
&lt;span style=&#34;color:#66d9ef&#34;&gt;exp&lt;/span&gt;(coef(lm1))

predict(lm1, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;response&amp;#34;&lt;/span&gt;, newdata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data.frame&lt;/span&gt;(grp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), 
                                                     time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;which gives us parameter estimates and predicted values as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Coefficients:
            Estimate Std. Error z value Pr(&amp;gt;|z|)    
(Intercept)  0.67039    0.05057  13.256  &amp;lt; 2e-16 ***
grp          0.94404    0.05960  15.839  &amp;lt; 2e-16 ***
time         0.56071    0.06338   8.846  &amp;lt; 2e-16 ***
grp:time     0.38325    0.07348   5.216 1.83e-07 ***

exp(coef(lm1))
(Intercept)         grp        time    grp:time 
   1.955000    2.570332    1.751918    1.467049 

predict(lm1, type = &amp;quot;response&amp;quot;, newdata = data.frame(grp = c(0, 0, 1, 1), time = c(0, 1, 0, 1)))
     1      2      3      4 
 1.955  3.425  5.025 12.915 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The exponentiated intercept, group and time parameters align with what we expect based on the model we specified. However, the interaction term is 1.50 which clearly does not equal 6. What is going on? The answer, in a word, is that the exponentiated parameter estimates are interpreted multiplicatively. We can find the correct interpretation through some simple calculations.&lt;/p&gt;

&lt;p&gt;At baseline the model indicates that we expect to see $exp(0.67) = 1.96$ events in the control cohort whereas we expect to see $exp(0.67)exp(0.94) = 5.0$ events in the treatment cohort. Both these values are close to the means we specified, namely 2 and 5.&lt;/p&gt;

&lt;p&gt;Similarly, at follow up the fitted value for the control group is $exp(0.67)exp(0.56) = 3.4$. Now, if the treatment were no different from the control intervention then we would expect to see something like $exp(0.67)exp(0.94)exp(0.56) = 8.80$ events at follow up. But this isn&amp;rsquo;t the case &amp;ndash; the model says we expect to see $8.76 \times exp(0.38) = 12.92$ events. Thus, the exponentiated &lt;code&gt;grp:time&lt;/code&gt; parameter suggests that we expect to see a $exp(0.38) = 1.47$ (or approx. 150%) increase &lt;em&gt;ABOVE&lt;/em&gt; the change observed in the control group at follow up. Additionally, it is also worth to note that the interpretation is in terms of what we think the means look like there is no direct link back to our pre-specified parameters. If you do want to sanity check and recover estimates of the original parameters then you can specify the identity link as follows:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;summary&lt;/span&gt;(lm1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; glm(y &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; grp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; time, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.fig, family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; poisson(link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Coefficients:
            Estimate Std. Error z value Pr(&amp;gt;|z|)    
(Intercept)  1.95500    0.09887  19.774   &amp;lt;2e-16 ***
grp          3.07000    0.18682  16.433   &amp;lt;2e-16 ***
time         1.47000    0.16401   8.963   &amp;lt;2e-16 ***
grp:time     6.42000    0.34147  18.801   &amp;lt;2e-16 ***
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Simulating Lung Cancer Incidence data in R</title>
      <link>https://t-student.github.io/post/data01-cancer/</link>
      <pubDate>Sat, 10 Feb 2018 00:00:00 +1100</pubDate>
      
      <guid>https://t-student.github.io/post/data01-cancer/</guid>
      <description>

&lt;p&gt;The world is now awash in data, but sometimes it is useful to roll your own. For example, you may to look at &amp;lsquo;what if&amp;rsquo; scenarios. Here I use publically available information on the age-class-distribution, rates of smoking and incidence of smoking to form a dataset that we will use in a later modelling exercise. In order to do this I use the &lt;code&gt;simstudy&lt;/code&gt; and &lt;code&gt;data.table&lt;/code&gt; R packages.&lt;/p&gt;

&lt;h1 id=&#34;distribution-of-lung-cancer-incidence-in-australia&#34;&gt;Distribution of lung cancer incidence in Australia&lt;/h1&gt;

&lt;p&gt;The Australian Institute of Health and Welfare publish incidence and mortality data. Data by cancer type is provided &lt;a href=&#34;https://www.aihw.gov.au/reports/cancer/acim-books/contents/acim-books&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. I downloaded the lung-cancer file, which originally looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t-student.github.io/media/data01-cancer1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I copied the 2014 data for the males and females into a new spreadsheet and loaded it into R.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;library&lt;/span&gt;(data.table)
&lt;span style=&#34;color:#f92672&#34;&gt;library&lt;/span&gt;(readxl)

&lt;span style=&#34;color:#75715e&#34;&gt;# see https://www.aihw.gov.au/reports/cancer/acim-books/contents/acim-books&lt;/span&gt;
dt.rates &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; data.table(readxl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;read_excel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rates.xlsx&amp;#34;&lt;/span&gt;), key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sex,age.bin&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;head&lt;/span&gt;(dt.rates)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;   sex age.bin rate.per.100k
1:   f       0    0.19356413
2:   f       5    0.02926882
3:   f      10    0.16013852
4:   f      15    0.29336471
5:   f      20    0.57427154
6:   f      25    0.54157117
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Table 6 from the data cube on Australian Demographics published by the ABS and found &lt;a href=&#34;http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/3101.0Jun%202017?OpenDocument&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; gives the age class distribution by sex in Australia as at the end of 2017. Again, I copied the data I needed and ditched the rest.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;dt.ages &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; data.table(readxl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;read_excel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rates.xlsx&amp;#34;&lt;/span&gt;), key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sex,age.bin&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;head&lt;/span&gt;(dt.ages)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The age distribution across sex is similar with females living very slightly longer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t-student.github.io/media/data01-agedist.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/3101.0Jun%202017?OpenDocument&lt;/span&gt;
dt.ages &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; data.table(readxl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;read_excel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ageclass.xlsx&amp;#34;&lt;/span&gt;), key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sex,age.bin&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;head&lt;/span&gt;(dt.ages)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I use the &lt;a href=&#34;https://cran.r-project.org/web/packages/simstudy/index.html&#34; target=&#34;_blank&#34;&gt;simstudy&lt;/a&gt; package to generate some new data. I assume that males and females are distributed 50:50 within the population. I only try to get an approximate&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set the seed for reproducibility&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;345&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Create a definition for males and a separate one for females. &lt;/span&gt;
def &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; defData(varname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sex&amp;#34;&lt;/span&gt;, dist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nonrandom&amp;#34;&lt;/span&gt;, formula &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
def &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; defData(def, varname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;age.bin.idx&amp;#34;&lt;/span&gt;, 
               formula &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;paste0&lt;/span&gt;(dt.ages&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;prop[dt.ages&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;sex &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;],  collapse &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;), 
               dist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;categorical&amp;#34;&lt;/span&gt;)

n.pop &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;
dtm &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; genData(n.pop, def)

def &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; defData(varname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sex&amp;#34;&lt;/span&gt;, dist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nonrandom&amp;#34;&lt;/span&gt;, formula &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
def &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; defData(def, varname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;age.bin.idx&amp;#34;&lt;/span&gt;, 
               formula &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;paste0&lt;/span&gt;(dt.ages&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;prop[dt.ages&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;sex &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt;],  collapse &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;), 
               dist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;categorical&amp;#34;&lt;/span&gt;)
n.pop &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;
dtf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; genData(n.pop, def)

&lt;span style=&#34;color:#75715e&#34;&gt;# Our working data set:&lt;/span&gt;
dt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rbind&lt;/span&gt;(dtm, dtf)
dt&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;id &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(dt)

&lt;span style=&#34;color:#75715e&#34;&gt;# Replace the sex var with something more readable&lt;/span&gt;
dt[, sex &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ifelse&lt;/span&gt;(dt[,sex] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt;)]
dt[, age.bin &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (age.bin.idx&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# For each age bin, which was modelled on the APS proportion of age&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class data, assign a random age between the start and end of age bin &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# interval. Use a random uniform distribution.&lt;/span&gt;
dt[, age &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; runif(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, age.bin, age.bin &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4.999&lt;/span&gt;), by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; id]

&lt;span style=&#34;color:#75715e&#34;&gt;# Create an indicator for greater than age 18 to differentially&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# assign a smoking probability.&lt;/span&gt;
dt[, age18 &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ifelse&lt;/span&gt;(dt[,age] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)]
dt[, psmk &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ifelse&lt;/span&gt;(dt[,sex] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dt[,age18], &lt;span style=&#34;color:#ae81ff&#34;&gt;0.14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dt[,age18])]

&lt;span style=&#34;color:#75715e&#34;&gt;# Bernouli trial to say whether smoker or not.&lt;/span&gt;
dt[, smk &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; rbinom(&lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(dt), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  prob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dt[,psmk])]
dt

&lt;span style=&#34;color:#75715e&#34;&gt;# Set key in order to making joining trivial&lt;/span&gt;
setkey(dt,sex,age.bin)

&lt;span style=&#34;color:#75715e&#34;&gt;# Left join by key&lt;/span&gt;
dt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;merge&lt;/span&gt;(dt, dt.rates, all.x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Create the &lt;/span&gt;
dt[, cancer &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; rbinom(&lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(dt), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  prob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rate.per.100k&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;)]
dt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The end result looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       sex age.bin    id age.bin.idx        age age18 psmk smk rate.per.100k cancer
     1:   f       0 50003           1  1.9907349     0 0.00   0     0.1935641      0
     2:   f       0 50036           1  4.8925030     0 0.00   0     0.1935641      0
     3:   f       0 50043           1  0.9762412     0 0.00   0     0.1935641      0
     4:   f       0 50046           1  3.8317576     0 0.00   0     0.1935641      0
     5:   f       0 50048           1  3.4270826     0 0.00   0     0.1935641      0
    ---                                                                             
 99996:   m      85 49289          18 89.3857581     1 0.14   0   450.0924556      0
 99997:   m      85 49326          18 86.2884594     1 0.14   0   450.0924556      0
 99998:   m      85 49330          18 89.6440606     1 0.14   1   450.0924556      0
 99999:   m      85 49373          18 88.3372412     1 0.14   0   450.0924556      0
100000:   m      85 49928          18 86.4949185     1 0.14   0   450.0924556      0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a very quick and dirty sanity check (always do a sanity check of some kind) we can compare the number of cancer cases in our simulated data with the rates we obtained earlier by scaling up each sex by age bin group. For example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Sanity&lt;/span&gt;
df.san &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; as_data_frame(dt) 
df.tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df.san &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;group_by(sex, age.bin) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;summarise(scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; n())
  
df.san &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df.san &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;filter(cancer &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;group_by(sex, age.bin) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;summarise(sim.n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n()) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ungroup() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;left_join(&lt;span style=&#34;color:#ae81ff&#34;&gt;.&lt;/span&gt;, df.tmp, by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sex&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;age.bin&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;mutate(sim.n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sim.n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;scale&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;select(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;scale&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;left_join(&lt;span style=&#34;color:#ae81ff&#34;&gt;.&lt;/span&gt;, dt.rates, by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sex&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;age.bin&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  tidyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;gather(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;var&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sex, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;age.bin)
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

ggplot(df.san) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_point(aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; age.bin, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sim.n), size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_point(aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; age.bin, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rate.per.100k), 
             size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  facet_grid(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;sex)

&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;This gives the following plot, which suggests that we have constructed something similar to the predicted cancer rates stratified by sex and age group although the older ages in the male group appear to diverge somewhat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t-student.github.io/media/data01-simres.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next we will use this data to do some modelling and explore coverage probabilities in logistic regression.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A brms implementation of the analysis presented in &#34;Bayesian linear mixed models using Stan: A tutorial for psychologists, linguists, and cognitive scientists&#34;</title>
      <link>https://t-student.github.io/post/brms01/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +1100</pubDate>
      
      <guid>https://t-student.github.io/post/brms01/</guid>
      <description>

&lt;p&gt;The title was stolen directly from the excellent 2016 &lt;a href=&#34;https://arxiv.org/abs/1506.06201&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt; by Tanner Sorensen and Shravan Vasishth. Here I recreate their analysis using &lt;a href=&#34;https://cran.r-project.org/web/packages/brms/index.html&#34; target=&#34;_blank&#34;&gt;brms&lt;/a&gt; R package, primarily as a self-teach exercise. I am going to very much assume that the basic ideas of Bayesian analysis are already understood. I will add some informtion on prior and posterior predictive checks because I think not doing so missing a large part of the point of a Bayesian analysis. The original tutorial provided a hands-on introduction to fitting LMMs in a Bayesian framework using the probabilistic programming language &lt;a href=&#34;http://mc-stan.org/&#34; target=&#34;_blank&#34;&gt;Stan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with the data. In brief the we have reading times (&lt;code&gt;rt&lt;/code&gt;) in milliseconds of the head noun of the relative clause recorded in two conditions with 37 subjects and 15 items. The data have some missing values, but the focus here was on a complete case analysis because missing values are a can of worms in Stan and deserve a tutorial of their own. In total we are looking at 547 data points.&lt;/p&gt;

&lt;p&gt;Quoting Sorensen:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;subject relative&lt;/strong&gt; is a sentence like &lt;em&gt;&amp;ldquo;The senator who interrogated the journalist resigned&amp;rdquo;&lt;/em&gt; where a noun (senator) is modified by a relative clause (who interrogated the journalist), and the modified noun is the grammatical subject of the relative clause. In an &lt;strong&gt;object relative&lt;/strong&gt;, the noun modified by the relative clause is the grammatical object of the relative clause like &lt;em&gt;&amp;ldquo;The senator who the journalist interrogated resigned&amp;rdquo;&lt;/em&gt;. In both cases, the noun that is modified (senator) is called the head noun.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can pick up what you need &lt;a href=&#34;https://github.com/vasishth/BayesLMMTutorial/blob/master/data/gibsonwu2012data.txt&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and save it to a local folder, but you can also read that file directly.  We only need a part of the data so lets wrap it up in a function.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;library&lt;/span&gt;(tidyverse)
&lt;span style=&#34;color:#f92672&#34;&gt;library&lt;/span&gt;(brms)

get.data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
  df.r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; read.table(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/vasishth/BayesLMMTutorial/master/data/gibsonwu2012data.txt&amp;#39;&lt;/span&gt;)  
  &lt;span style=&#34;color:#75715e&#34;&gt;# head(df.r)&lt;/span&gt;
  
  df.r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df.r &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
    dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;filter(region &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;headnoun&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
    dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;select(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;word) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
    dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;mutate(subj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as.factor&lt;/span&gt;(subj),
                  item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as.factor&lt;/span&gt;(item),
                  so &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ifelse&lt;/span&gt;(type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subj-ext&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) 
  &lt;span style=&#34;color:#75715e&#34;&gt;# head(df.r)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# sort(as.numeric(unique(df.r$subj)))&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# sort(as.numeric(unique(df.r$item)))&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# nrow(df.r)&lt;/span&gt;
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(df.r)
}


df.r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get.data()

&lt;span style=&#34;color:#75715e&#34;&gt;# Distribution of reading times. &lt;/span&gt;
plot(density(df.r&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;rt), main &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Distribution of reading times&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above code you will note that the &lt;code&gt;so&lt;/code&gt; variable contains an indicator of &amp;lsquo;o&amp;rsquo; (object relative) and &amp;rsquo;s&amp;rsquo; (subject relative) that are coded as 1 and -1 respectively. When coding up Stan models you need to be a bit more careful with your data &amp;ndash; we might come back to this later.&lt;/p&gt;

&lt;!-- A quick look at the reading times shows us what we expect to see, namely a heavily skewed distribution. 

&lt;figure &gt;
    
        &lt;img src=&#34;https://t-student.github.io/media/brms-tutorial-01.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;PDF of reading times&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
 --&gt;

&lt;p&gt;The &lt;a href=&#34;https://cran.r-project.org/web/packages/brms/index.html&#34; target=&#34;_blank&#34;&gt;brms&lt;/a&gt; package supports a wide range of (non-)linear multivariate multilevel models using Stan for full Bayesian inference. Many distributional assumptions are supported. Additionally, brms provides the capability of extracting the underlying Stan code and thus gives a useful starting point if you want to do something more complicated. As a starting point we ignore the (very likely) possibility of correlated measures and fit a fixed effect model. We use weakly informative priors, but not the current &lt;code&gt;stan-dev&lt;/code&gt; &lt;a href=&#34;https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations&#34; target=&#34;_blank&#34;&gt;reccommendations&lt;/a&gt; nor a Cauchy&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; distribution as per Gelman et al. 2008 &lt;a href=&#34;https://arxiv.org/pdf/0901.4011.pdf&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt;. Here, we adopt Normal priors, simply because they are easy to think about and rationalise. For reference, the parameterisations of the brms supported distributions can be found &lt;a href=&#34;https://cran.r-project.org/web/packages/brms/vignettes/brms_families.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;an-initial-model&#34;&gt;An Initial Model&lt;/h2&gt;

&lt;p&gt;Prior to looking at the data, what do we know about average reading speed? Well, obviously, the lower bound is a little be greater than zero and a high value might be a couple of seconds. So, lets just say a typcial value is about 1000 millisecs and you could expect anywhere between about 100 and 2000 milliseconds and that gives us some guidance on what the intercept looks like. We are pulling numbers out of the air here, but at least we have a rough idea of what the typical value might be and we can (should) conduct sensitivity analyses with uninformative priors (that typically correspond with frequentist results).&lt;/p&gt;

&lt;p&gt;$$ rt_i \sim Lognormal(\mu_i, \sigma) \\\ \mu_i = \beta_0 + \beta_1 so_i \\\  \beta_0 \sim Normal(6, 1) \\\  \beta_1 \sim Normal(0, 10) \\\  \sigma \sim Student-t(3, 0, 10) $$&lt;/p&gt;

&lt;p&gt;OK, let&amp;rsquo;s fit a model. The brms package can have multi-dimensional formula so we specify the formula explicitly as &lt;code&gt;myf&lt;/code&gt; and use this approach repeatedly.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# brms formula, more later...&lt;/span&gt;
myf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; bf(rt &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; so)
priors &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get_prior(myf,
                    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r,
                    family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lognormal())
priors&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;prior[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal(0, 10)&amp;#34;&lt;/span&gt;
priors&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;prior[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal(6, 1)&amp;#34;&lt;/span&gt;
priors

blm0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; brms&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;brm(myf, 
            data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r,
            family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lognormal(),
            prior &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; priors,
            control &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;(max_treedepth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;),
            iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;,
            chains &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, cores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5453&lt;/span&gt;, save_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brm1.txt&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;summary&lt;/span&gt;(blm0, waic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;blm0&lt;/code&gt; is an instance of a &lt;code&gt;brmsfit&lt;/code&gt; object. The &lt;code&gt;summary&lt;/code&gt; view gives the following output, which is similar to the fixed effects model presented by Sorensen. What are these results telling us? First, the Rhat values are equal to 1, so the chains look like they converged OK. Second, the reading time for subject-relative has a central value around $exp(6.06 + 0.04) = 446$ millisecs and the object-relative has a central value of around $exp(6.06 - 0.04) = 412$ millisecs. These values align to the exponentiated mean of the log reading times for the two groups.&lt;/p&gt;

&lt;!--We expect typical values to be $exp(2 \times 0.6) = 3.3$ --&gt;

&lt;pre&gt;&lt;code&gt; Family: lognormal 
  Links: mu = identity; sigma = identity 
Formula: rt ~ so 
   Data: df.r (Number of observations: 547) 
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1; 
         total post-warmup samples = 2000
    ICs: LOO = NA; WAIC = 7625.74; R2 = NA
 
Population-Level Effects: 
          Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
Intercept     6.06      0.03     6.01     6.11       1917 1.00
so           -0.04      0.03    -0.09     0.01       2000 1.00

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     0.60      0.02     0.57     0.63       2000 1.00

Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample 
is a crude measure of effective sample size, and Rhat is the potential 
scale reduction factor on split chains (at convergence, Rhat = 1).

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The marginal posterior distributions for each of the three parameters are shown below. The distribution of &lt;code&gt;b_s0&lt;/code&gt; is mostly below zero suggesting that the object-relative is easier to read. However, the 95\% &lt;em&gt;credible interval&lt;/em&gt; includes zero so the evidence is not particularly strong. Unlike frequentist analyses, the results give us a view on the uncertainty in the error term (&lt;code&gt;sigma&lt;/code&gt;) which ranges from 0.57 to 0.63 on the log scale.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://t-student.github.io/media/brms01-posterior1.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Posterior distribution for estimated parameters&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Here&amp;rsquo;s a view of the observed data overlayed with the posterior distribution for reading times showing the estimated typical reading time. The right hand plot shows a &lt;strong&gt;posterior predictive distribution&lt;/strong&gt;, which embodies both the uncertainty inherent in our distributional assumption for the response and the uncertainty in the estimated parameters. The idea behind examining the posterior predictive distribution is that it should generate data that looks similar to the observed data. &lt;a href=&#34;http://xcelab.net/rm/statistical-rethinking/&#34; target=&#34;_blank&#34;&gt;McElreath&lt;/a&gt; provides the clearest exposition I have read on this concept. The posterior predictive is a simulation of our original data conditional on the observed values.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Posterior means&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Posterior predictive&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://t-student.github.io/media/brms01-posterior2.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://t-student.github.io/media/brms01-posterior3.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Another option for model checking is to use the &lt;a href=&#34;https://cran.r-project.org/web/packages/bayesplot/index.html&#34; target=&#34;_blank&#34;&gt;bayesplot&lt;/a&gt; package, which provides a swag-full of posterior predictive checks that are more sophisticated than the single generated dataset shown above. Below we can see that simulated data has a much lower maximum value than that observed in the original data and the median of the simulated values is actually quite a lot higher than we observed. Both these diagnostics suggest the current model does not characterise the data well.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;PPC (max)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;PPC (median)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://t-student.github.io/media/brms01-ppc4.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://t-student.github.io/media/brms01-ppc5.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Posterior predictive checks grouped by subject and object relative (see below) appear to show that the issues manifest to a greater extent in the subject relative group. An outline of the code for the last few plots is also shown below.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;PPC (max)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;PPC (median)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://t-student.github.io/media/brms01-ppc6.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://t-student.github.io/media/brms01-ppc7.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Look at the posterior distribution&lt;/span&gt;
m.post &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as.matrix&lt;/span&gt;(blm0)
&lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(m.post)
df.post1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data_frame&lt;/span&gt;(type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subj-ext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;obj-ext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;)), 
                      rt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(m.post[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; m.post[,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], m.post[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m.post[,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])  )
&lt;span style=&#34;color:#66d9ef&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;324&lt;/span&gt;)
idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; base&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sample&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(df.post1), &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;, replace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)
df.post1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df.post1[idx, ]

&lt;span style=&#34;color:#75715e&#34;&gt;# Posterior&lt;/span&gt;
ggplot(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r , aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rt))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_jitter(width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;, alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_jitter(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.post1, aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;exp&lt;/span&gt;(rt) ), 
              width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  ylab(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reading time (millisec)&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xlab(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#75715e&#34;&gt;# Single draw just for demonstration&lt;/span&gt;
pp.tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; brms&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;posterior_predict(blm0, newdata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data.frame&lt;/span&gt;(so &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
&lt;span style=&#34;color:#66d9ef&#34;&gt;dim&lt;/span&gt;(pp.tmp)

df.post2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data_frame&lt;/span&gt;(type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subj-ext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;obj-ext&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;)), 
                      rt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(pp.tmp[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], pp.tmp[,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])  )
&lt;span style=&#34;color:#66d9ef&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;284729&lt;/span&gt;)
idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; base&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sample&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;(df.post2), &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, replace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)
df.post2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df.post2[idx, ]
str(df.post2)

ggplot(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r , aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rt))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_jitter(width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;, alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  geom_jitter(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.post2, aes(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rt ), 
              width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  ylab(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reading time (millisec)&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xlab(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#75715e&#34;&gt;# More useful PPC&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;library&lt;/span&gt;(bayesplot)
ppc_dens_overlay(df.r&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;rt, yrep[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, ])

ppc_stat(df.r&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;rt, yrep, stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;max&amp;#34;&lt;/span&gt;)
ppc_stat(df.r&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;rt, yrep, stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;median&amp;#34;&lt;/span&gt;)

ppc_stat_grouped(df.r&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;rt, yrep, stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;max&amp;#34;&lt;/span&gt;, group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;so)
ppc_stat_grouped(df.r&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;rt, yrep, stat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;median&amp;#34;&lt;/span&gt;, group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;so)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;relaxing-the-equal-variance-assumption&#34;&gt;Relaxing the equal variance assumption&lt;/h2&gt;

&lt;p&gt;While Sorensen do not explore this avenue, one possibility is that we may have reasonable distributional assumptions but the notion of a shared variance across groups may not be accurate. The brms package readily supports this refinement via its forumla interface that we used earlier. We do not nominate any priors for the &lt;code&gt;sigma&lt;/code&gt; model parameters so they will just be assigned uninformative defaults.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;myf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; bf(rt &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; so, sigma &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; so)
priors &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get_prior(myf,
                    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r,
                    family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lognormal())
priors&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;prior[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal(0, 10)&amp;#34;&lt;/span&gt;
priors&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;prior[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal(6, 1)&amp;#34;&lt;/span&gt;

blm1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; brm(myf, 
            data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r,
            family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lognormal(),
            prior &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; priors,
            control &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;(max_treedepth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;),
            iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;,
            chains &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, cores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5453&lt;/span&gt;, save_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brm1.txt&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;summary&lt;/span&gt;(blm1, waic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The results (below) suggest that the variation in reading times are different across subject and object groups. However, posterior predictive checks on the maximum and median values (not shown) are still not representative of the observed values. We won&amp;rsquo;t take this further yet, but we might return to it later.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Family: lognormal 
  Links: mu = identity; sigma = log 
Formula: rt ~ so 
         sigma ~ so
   Data: df.r (Number of observations: 547) 
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1; 
         total post-warmup samples = 2000
    ICs: LOO = NA; WAIC = 7614.42; R2 = NA
 
Population-Level Effects: 
                Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
Intercept           6.06      0.02     6.01     6.11       1897 1.00
sigma_Intercept    -0.53      0.03    -0.58    -0.46       2000 1.00
so                 -0.04      0.03    -0.09     0.01       1768 1.00
sigma_so           -0.11      0.03    -0.17    -0.05       1892 1.00
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modelling-the-repeat-measures&#34;&gt;Modelling the Repeat Measures&lt;/h2&gt;

&lt;p&gt;Given we know there are repeat measures in the data, we should model it as such or risk violating an assumption of independence. We do this by specifying person-level and item-level variability in the model. I won&amp;rsquo;t say most, but a lot of people refer to these as &lt;em&gt;random intercepts&lt;/em&gt;. Here is the revised model. You can see that the $\beta_{person[i]}$ and $\beta_{item[i]}$ make adjustments to the intercept term dependent on the particular person and the particular item, hence the random intercept terminology.&lt;/p&gt;

&lt;p&gt;$$ rt_i \sim Lognormal(\mu_i, \sigma) \\\ \mu_i = \beta_0 + \beta_{person[i]} + \beta_{item[i]} +  \beta_1 so_i \\\  \beta_0 \sim Normal(6, 1) \\\  \beta_{person} \sim Normal(0, \sigma_{person}) \\\ \beta_{item} \sim Normal(0, \sigma_{item}) \\\ \beta_1 \sim Normal(0, 10) \\\  \sigma, \sigma_{person} , \sigma_{item} \sim Student-t(3, 0, 10)  $$&lt;/p&gt;

&lt;p&gt;It is a straight forward exercise to ask &lt;code&gt;brms&lt;/code&gt; to fit this model. For the sake of simplicity, we will not continue to model the standard deviation across groups and I haven&amp;rsquo;t specified all the priors but it would be simple to do so.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Random effects model&lt;/span&gt;
df.r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get.data()
myf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; bf(rt &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; so &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;subj) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;item))
priors &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get_prior(myf,
                    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r,
                    family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lognormal())
priors&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;prior[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal(0, 10)&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; priors&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                   prior     class      coef group resp dpar nlpar bound&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 1         normal(0, 10)         b                                      &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 2         normal(0, 10)         b        so                            &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 3 student_t(3, 5.9, 10) Intercept                                      &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 4   student_t(3, 0, 10)        sd                                      &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 5                              sd            item                      &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 6                              sd Intercept  item                      &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 7                              sd            subj                      &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 8                              sd Intercept  subj                      &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 9   student_t(3, 0, 10)     sigma                  &lt;/span&gt;


blm2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; brm(rt &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; so &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;subj) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;item), 
            data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r,
            family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lognormal(),
            prior &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; priors,
            control &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;(max_treedepth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;),
            iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;,
            chains &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, cores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5453&lt;/span&gt;, save_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brm1.stan&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;summary&lt;/span&gt;(blm2)


post1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; brms&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;posterior_predict(blm2)
&lt;span style=&#34;color:#66d9ef&#34;&gt;dim&lt;/span&gt;(post1)
&lt;span style=&#34;color:#66d9ef&#34;&gt;head&lt;/span&gt;(post1[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
hist(post1[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
bayesplot&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ppc_dens_overlay(df.r&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;rt, post1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, ])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The results show us that the modelling the subject level and item level variance was worthwhile in that both the random intercept variance estimates are substantially above zero. Additionally, the estimates align closely with those of Sorensen. However, the estimate for the difference between the reading times continues to represent only weak evidence of an effect.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Family: lognormal 
  Links: mu = identity; sigma = identity 
Formula: rt ~ so + (1 | subj) + (1 | item) 
   Data: df.r (Number of observations: 547) 
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1; 
         total post-warmup samples = 2000
    ICs: LOO = NA; WAIC = NA; R2 = NA
 
Group-Level Effects: 
~item (Number of levels: 15) 
              Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(Intercept)     0.20      0.05     0.12     0.32        655 1.00

~subj (Number of levels: 37) 
              Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(Intercept)     0.26      0.04     0.19     0.35        867 1.00

Population-Level Effects: 
          Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
Intercept     6.06      0.07     5.92     6.21        588 1.01
so           -0.04      0.02    -0.08     0.01       2000 1.00

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     0.52      0.02     0.49     0.55       2000 1.00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we introduce varying slopes into the model, which allows us to characterise the variation in the &lt;strong&gt;difference&lt;/strong&gt; in reading time across individuals and items. As per Sorensen, we initially prohibit correlation between the varying interecpts and slopes. The required implementation is as follows.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df.r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get.data()
&lt;span style=&#34;color:#75715e&#34;&gt;# The latter (-1 + ) part prevents correlation between random effects&lt;/span&gt;
(priors &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get_prior(bf(rt &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; so &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
                         (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;subj) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; so &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;subj) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
                         (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;item) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; so&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;item)),   
                    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r,
                    family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lognormal()))
priors&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;prior[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal(0, 10)&amp;#34;&lt;/span&gt;
blm3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; brm(rt &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; so &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
              (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;subj) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; so &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;subj) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
              (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;item) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; so&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;item), 
            data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r,
            family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lognormal(),
            prior &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; priors,
            control &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;(max_treedepth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;),
            iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;,
            chains &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, cores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5453&lt;/span&gt;, save_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brm1.stan&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;summary&lt;/span&gt;(blm3)
VarCorr(blm3)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While there is evidence for including the random slopes, the estimate of the difference between subject and object relatives has weakened.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Family: lognormal 
  Links: mu = identity; sigma = identity 
Formula: rt ~ so + (1 | subj) + (-1 + so | subj) + (1 | item) + (-1 + so | item) 
   Data: df.r (Number of observations: 547) 
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1; 
         total post-warmup samples = 2000
    ICs: LOO = NA; WAIC = NA; R2 = NA
 
Group-Level Effects: 
~item (Number of levels: 15) 
              Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(Intercept)     0.20      0.05     0.12     0.32        797 1.00
sd(so)            0.04      0.03     0.00     0.11        782 1.00

~subj (Number of levels: 37) 
              Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(Intercept)     0.25      0.04     0.18     0.34        668 1.01
sd(so)            0.06      0.03     0.00     0.13        619 1.00

Population-Level Effects: 
          Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
Intercept     6.06      0.08     5.92     6.22        458 1.00
so           -0.04      0.03    -0.09     0.02       2000 1.00

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     0.52      0.02     0.49     0.55       2000 1.00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we remove the restriction on correlation between the varying slopes and intercepts as implemented below.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df.r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get.data()
(priors &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get_prior(bf(rt &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; so &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
                          (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; so&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;subj) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
                          (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; so&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;item)),
                     data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r,
                     family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lognormal()))
priors&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;prior[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal(0, 10)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# mypriors1 &amp;lt;- c(brms::set_prior(&amp;#34;cauchy(0, 2.5)&amp;#34;, class = &amp;#34;b&amp;#34;))&lt;/span&gt;
blm4 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; brm(rt &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; so &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
              (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; so&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;subj) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
              (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; so&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;item), 
            data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df.r,
            family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lognormal(),
            prior &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; priors,
            control &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;(max_treedepth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;),
            iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;,
            chains &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, cores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5453&lt;/span&gt;, save_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brm1.stan&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;summary&lt;/span&gt;(blm4)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The results suggest no correlation between the varying intercepts and slopes for the item but a negative correlation between the person level varying intercepts and slopes. The implication is that if a person has a slower than average reading time then they will read object relatives.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Family: lognormal 
  Links: mu = identity; sigma = identity 
Formula: rt ~ so + (1 + so | subj) + (1 + so | item) 
   Data: df.r (Number of observations: 547) 
Samples: 2 chains, each with iter = 2000; warmup = 1000; thin = 1; 
         total post-warmup samples = 2000
    ICs: LOO = NA; WAIC = NA; R2 = NA
 
Group-Level Effects: 
~item (Number of levels: 15) 
                  Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(Intercept)         0.21      0.05     0.13     0.33        660 1.00
sd(so)                0.04      0.03     0.00     0.10        961 1.00
cor(Intercept,so)    -0.00      0.53    -0.92     0.92       2000 1.00

~subj (Number of levels: 37) 
                  Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sd(Intercept)         0.25      0.04     0.19     0.34        624 1.00
sd(so)                0.07      0.03     0.01     0.13        680 1.00
cor(Intercept,so)    -0.61      0.30    -0.98     0.16       1392 1.00

Population-Level Effects: 
          Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
Intercept     6.06      0.07     5.92     6.21        492 1.00
so           -0.03      0.03    -0.09     0.02       1160 1.00

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat
sigma     0.51      0.02     0.48     0.55       2000 1.00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, that is all I have time for today. Hopefully, I will get an opportunity not to far in the future to check the interpretation and add some more details.&lt;/p&gt;

&lt;!-- 
## To do

1. Prior predictive - how sane are our priors?
1. Correlation between the covariates?
2. varying intercepts 45 mins
3. varying intercepts varying slopes 45 mins
4. correlation between the two 40 mins
5. conclusions



Of course, one may want to simplify the model for reasons of parsimony, or easier interpretability. Model selection can be carried out by evaluating predictive performance of the model, with methods such as Leave One Out (LOO) Cross-validation, or by using information criteria like the Watanabe Akaike (or Widely Available) Information Criterion (WAIC). See Nicenboim and Vasishth (2016) for discussion and example code.


&lt;script src=&#34;//gist.github.com/t-student/b93167cf529607038406.js&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
   &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&amp;gt;{{ .Title }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
    {{ range .Data.Pages }}
        {{ .Render &amp;#34;summary&amp;#34;}}
    {{ end }}
  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;section&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/w7Ft2ymGmfc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


--&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Cauchy_distribution&#34; target=&#34;_blank&#34;&gt;Cauchy&lt;/a&gt; distribution is truly quite a bizarre, some would say pathological, distribution as neither the expeccted value nor variance are defined. It also ryhmes with grouchy - no wonder.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Academic: the website designer for Hugo</title>
      <link>https://t-student.github.io/post/getting-started/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +1000</pubDate>
      
      <guid>https://t-student.github.io/post/getting-started/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Academic&lt;/strong&gt; is a framework to help you create a beautiful website quickly. Perfect for personal sites, blogs, or business/project sites. &lt;a href=&#34;https://themes.gohugo.io/theme/academic/&#34; target=&#34;_blank&#34;&gt;Check out the latest demo&lt;/a&gt; of what you&amp;rsquo;ll get in less than 10 minutes. Then head on over to the &lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Quick Start guide&lt;/a&gt; or take a look at the &lt;a href=&#34;https://sourcethemes.com/academic/updates/&#34; target=&#34;_blank&#34;&gt;Release Notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/academic.png&#34; alt=&#34;Screenshot&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Key features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easily manage various content including homepage, blog posts, publications, talks, and projects&lt;/li&gt;
&lt;li&gt;Extensible via &lt;strong&gt;color themes&lt;/strong&gt; and &lt;strong&gt;widgets/plugins&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Write in &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;Markdown&lt;/a&gt; for easy formatting and code highlighting, with &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34;&gt;LaTeX&lt;/a&gt; for mathematical expressions&lt;/li&gt;
&lt;li&gt;Social/academic network linking, &lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34;&gt;Google Analytics&lt;/a&gt;, and &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34;&gt;Disqus&lt;/a&gt; comments&lt;/li&gt;
&lt;li&gt;Responsive and mobile friendly&lt;/li&gt;
&lt;li&gt;Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;Multilingual and easy to customize&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;color-themes&#34;&gt;Color Themes&lt;/h2&gt;

&lt;p&gt;Academic is available in different color themes and font themes.&lt;/p&gt;



&lt;div class=&#34;gallery&#34;&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;Default&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-default.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-default.png&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;Ocean&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-ocean.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-ocean.png&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;Dark&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-dark.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-dark.png&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;Default&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-forest.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-forest.png&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;Coffee theme with Playfair font&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-coffee-playfair.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-coffee-playfair.png&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;1950s&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-1950s.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-1950s.png&#34;&gt;
  &lt;/a&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;You can choose from one of the following four methods to install:
* one-click install using your web browser (recommended)
* install on your computer using Git with the Command Prompt/Terminal app
* install on your computer by downloading the ZIP files
* install on your computer with RStudio&lt;/p&gt;

&lt;h3 id=&#34;quick-install-using-your-web-browser&#34;&gt;Quick install using your web browser&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://app.netlify.com/start/deploy?repository=https://github.com/sourcethemes/academic-kickstart&#34; target=&#34;_blank&#34;&gt;Install Academic with Netlify&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Netlify will provide you with a customizable URL to access your new site&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;On GitHub, go to your newly created &lt;code&gt;academic-kickstart&lt;/code&gt; repository and edit &lt;code&gt;config.toml&lt;/code&gt; to personalize your site. Shortly after saving the file, your site will automatically update&lt;/li&gt;
&lt;li&gt;Read the &lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Quick Start Guide&lt;/a&gt; to learn how to add Markdown content. For inspiration, refer to the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite&#34; target=&#34;_blank&#34;&gt;Markdown content&lt;/a&gt; which powers the &lt;a href=&#34;https://themes.gohugo.io/theme/academic/&#34; target=&#34;_blank&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;install-with-git&#34;&gt;Install with Git&lt;/h3&gt;

&lt;p&gt;Prerequisites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34; target=&#34;_blank&#34;&gt;Download and install Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/installing/#quick-install&#34; target=&#34;_blank&#34;&gt;Download and install Hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-kickstart#fork-destination-box&#34; target=&#34;_blank&#34;&gt;Fork&lt;/a&gt; the &lt;em&gt;Academic Kickstart&lt;/em&gt; repository and clone your fork with Git:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/sourcethemes/academic-kickstart.git My_Website
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note that if you forked Academic Kickstart, the above command should be edited to clone your fork, i.e. replace &lt;code&gt;sourcethemes&lt;/code&gt; with your GitHub username.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Initialize the theme:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd My_Website
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;install-with-zip&#34;&gt;Install with ZIP&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-kickstart/archive/master.zip&#34; target=&#34;_blank&#34;&gt;Download&lt;/a&gt; and extract &lt;em&gt;Academic Kickstart&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gcushen/hugo-academic/archive/master.zip&#34; target=&#34;_blank&#34;&gt;Download&lt;/a&gt; and extract the &lt;em&gt;Academic theme&lt;/em&gt; to the &lt;code&gt;themes/academic/&lt;/code&gt; folder from the above step&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;install-with-rstudio&#34;&gt;Install with RStudio&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34; target=&#34;_blank&#34;&gt;View the guide to installing Academic with RStudio&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;quick-start&#34;&gt;Quick start&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you installed on your computer, view your new website by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now visit &lt;a href=&#34;http://localhost:1313&#34; target=&#34;_blank&#34;&gt;localhost:1313&lt;/a&gt; and your new Academic powered website will appear. Otherwise, if using Netlify, they will provide you with your URL.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Read the &lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Quick Start Guide&lt;/a&gt; to learn how to add Markdown content, customize your site, and deploy it. For inspiration, refer to the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite&#34; target=&#34;_blank&#34;&gt;Markdown content&lt;/a&gt; which powers the &lt;a href=&#34;https://themes.gohugo.io/theme/academic/&#34; target=&#34;_blank&#34;&gt;Demo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build your site by running the &lt;code&gt;hugo&lt;/code&gt; command. Then &lt;a href=&#34;https://georgecushen.com/create-your-website-with-hugo/&#34; target=&#34;_blank&#34;&gt;host it for free using Github Pages&lt;/a&gt; or Netlify (refer to the first installation method). Alternatively, copy the generated &lt;code&gt;public/&lt;/code&gt; directory (by FTP, Rsync, etc.) to your production web server (such as a university&amp;rsquo;s hosting service).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;updating&#34;&gt;Updating&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;em&gt;star&lt;/em&gt; the project on &lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; to help keep track of updates and check out the &lt;a href=&#34;https://sourcethemes.com/academic/tags/updates&#34; target=&#34;_blank&#34;&gt;release notes&lt;/a&gt; prior to updating your site.&lt;/p&gt;

&lt;p&gt;Before updating the framework, it is recommended to make a backup of your entire website directory (or at least your &lt;code&gt;themes/academic&lt;/code&gt; directory) and record your current version number.&lt;/p&gt;

&lt;p&gt;By default, Academic is installed as a Git submodule which can be updated by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --remote --merge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;Check out the update guide&lt;/a&gt; for full instructions and alternative methods.&lt;/p&gt;

&lt;h2 id=&#34;feedback-contributing&#34;&gt;Feedback &amp;amp; Contributing&lt;/h2&gt;

&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues&#34; target=&#34;_blank&#34;&gt;issue tracker&lt;/a&gt; to let me know about any bugs or feature requests, or alternatively make a pull request.&lt;/p&gt;

&lt;p&gt;For support, head over to the &lt;a href=&#34;http://discuss.gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo discussion forum&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Copyright 2016-present &lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/blob/master/LICENSE.md&#34; target=&#34;_blank&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
